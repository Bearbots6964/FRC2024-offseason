@file:Suppress("ConstPropertyName")

package frc.robot.generated

import com.ctre.phoenix6.configs.*
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.math.util.Units
import frc.robot.subsystems.CommandSwerveDrivetrain

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains: Slot0Configs = Slot0Configs()
        .withKP(100.0).withKI(0.0).withKD(0.2)
        .withKS(0.0).withKV(1.5).withKA(0.0)

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs = Slot0Configs()
        .withKP(3.0).withKI(0.0).withKD(0.0)
        .withKS(0.0).withKV(0.0).withKA(0.0)

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val steerClosedLoopOutput = ClosedLoopOutputType.Voltage

    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val driveClosedLoopOutput = ClosedLoopOutputType.Voltage

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private const val slipCurrentA = 150.0

    // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val driveInitialConfigs = TalonFXConfiguration()
    private val steerInitialConfigs: TalonFXConfiguration = TalonFXConfiguration()
        .withCurrentLimits(
            CurrentLimitsConfigs() // Swerve azimuth does not require much torque output, so we can set a relatively low
                // stator current limit to help avoid brownouts without impacting performance.
                .withStatorCurrentLimit(60.0)
                .withStatorCurrentLimitEnable(true)
        )
    private val cancoderInitialConfigs = CANcoderConfiguration()

    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private val pigeonConfigs: Pigeon2Configuration? = null

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    const val speedAt12VoltsMps: Double = 9.46

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val coupleRatio = 3.5714285714285716

    private const val driveGearRatio = 6.746031746031747
    private const val steerGearRatio = 21.428571428571427
    private const val wheelRadiusInches = 4.0

    private const val invertLeftSide = false
    private const val invertRightSide = true

    private const val CANBusName = ""
    private const val pigeonId = 63


    // These are only used for simulation
    private const val steerInertia = 0.00001
    private const val driveInertia = 0.001

    // Simulated voltage necessary to overcome friction
    private const val steerFrictionVoltage = 0.25
    private const val driveFrictionVoltage = 0.25

    private val DrivetrainConstants: SwerveDrivetrainConstants = SwerveDrivetrainConstants()
        .withCANbusName(CANBusName)
        .withPigeon2Id(pigeonId)
        .withPigeon2Configs(pigeonConfigs)

    private val ConstantCreator: SwerveModuleConstantsFactory = SwerveModuleConstantsFactory()
        .withDriveMotorGearRatio(driveGearRatio)
        .withSteerMotorGearRatio(steerGearRatio)
        .withWheelRadius(wheelRadiusInches)
        .withSlipCurrent(slipCurrentA)
        .withSteerMotorGains(steerGains)
        .withDriveMotorGains(driveGains)
        .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
        .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
        .withSpeedAt12VoltsMps(speedAt12VoltsMps)
        .withSteerInertia(steerInertia)
        .withDriveInertia(driveInertia)
        .withSteerFrictionVoltage(steerFrictionVoltage)
        .withDriveFrictionVoltage(driveFrictionVoltage)
        .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
        .withCouplingGearRatio(coupleRatio)
        .withDriveMotorInitialConfigs(driveInitialConfigs)
        .withSteerMotorInitialConfigs(steerInitialConfigs)
        .withCANcoderInitialConfigs(cancoderInitialConfigs)


    // Front Left
    private const val frontLeftDriveMotorId = 6
    private const val frontLeftSteerMotorId = 7
    private const val frontLeftEncoderId = 5
    private const val frontLeftEncoderOffset = -0.046142578125
    private const val frontLeftSteerInvert = true

    private const val frontLeftXPosInches = 12.125
    private const val frontLeftYPosInches = 12.125

    // Front Right
    private const val frontRightDriveMotorId = 9
    private const val rightSteerMotorId = 10
    private const val frontRightEncoderId = 8
    private const val frontRightEncoderOffset = 0.215576171875
    private const val frontRightSteerInvert = true

    private const val frontRightXPosInches = 12.125
    private const val frontRightYPosInches = -12.125

    // Back Left
    private const val backLeftDriveMotorId = 3
    private const val backLeftSteerMotorId = 4
    private const val backLeftEncoderId = 2
    private const val backLeftEncoderOffset = -0.2333984375
    private const val backLeftSteerInvert = true

    private const val backLeftXPosInches = -12.125
    private const val backLeftYPosInches = 12.125

    // Back Right
    private const val backRightDriveMotorId = 12
    private const val backRightSteerMotorId = 13
    private const val backRightEncoderId = 11
    private const val backRightEncoderOffset = -0.94921875
    private const val backRightSteerInvert = true

    private const val backRightXPosInches = -12.125
    private const val backRightYPosInches = -12.125


    private val FrontLeft: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        frontLeftSteerMotorId,
        frontLeftDriveMotorId,
        frontLeftEncoderId,
        frontLeftEncoderOffset,
        Units.inchesToMeters(
            frontLeftXPosInches
        ),
        Units.inchesToMeters(frontLeftYPosInches),
        invertLeftSide
    )
        .withSteerMotorInverted(frontLeftSteerInvert)
    private val FrontRight: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        rightSteerMotorId,
        frontRightDriveMotorId,
        frontRightEncoderId,
        frontRightEncoderOffset,
        Units.inchesToMeters(
            frontRightXPosInches
        ),
        Units.inchesToMeters(frontRightYPosInches),
        invertRightSide
    )
        .withSteerMotorInverted(frontRightSteerInvert)
    private val BackLeft: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        backLeftSteerMotorId, backLeftDriveMotorId, backLeftEncoderId, backLeftEncoderOffset, Units.inchesToMeters(
            backLeftXPosInches
        ), Units.inchesToMeters(backLeftYPosInches), invertLeftSide
    )
        .withSteerMotorInverted(backLeftSteerInvert)
    private val BackRight: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        backRightSteerMotorId,
        backRightDriveMotorId,
        backRightEncoderId,
        backRightEncoderOffset,
        Units.inchesToMeters(
            backRightXPosInches
        ),
        Units.inchesToMeters(backRightYPosInches),
        invertRightSide
    )
        .withSteerMotorInverted(backRightSteerInvert)

    val DriveTrain: CommandSwerveDrivetrain = CommandSwerveDrivetrain(
        DrivetrainConstants, FrontLeft,
        FrontRight, BackLeft, BackRight
    )
}
